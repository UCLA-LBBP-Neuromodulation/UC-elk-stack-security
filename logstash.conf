
### A Logstash focus on information security

input { 
	
	beats {
		port => 5044
		ssl => true
		ssl_certificate => "/etc/pki/tls/certs/beats-logstash.crt"
		ssl_key => "etc/pki/tls/private/beats-logstash.key"
		ssl_verify_mode => "none"
	}
	
	udp {
    	 port => 9000
	 	 type => "syslog"
	 	 tags => [ "ossec" ]
	}
	
} ### end input 



filter {
	
	########################################################
	### Remove certain tags
	########################################################
	if "beats_input_codec_plain_applied" in [tags] {
        mutate {
            remove_tag => ["beats_input_codec_plain_applied"]
        }
    }
    
    if "_jsonparsefailure" in [tags] {
        mutate {
            remove_tag => ["_jsonparsefailure"]
        }
    }
    
    if "_grokparsefailure" in [tags] {
        mutate {
            remove_tag => ["_grokparsefailure"]
        }
    }
    
	if "beats_input_raw_event" in [tags] {
        mutate {
            remove_tag => ["beats_input_raw_event"]
        }
    }
    
    
    
    
    ########################################################
	### Packetbeat (netflow)
	########################################################
  

    if [type] == "flow" {
    	
    	### geoIP lookup on both source and destination IP and separating longitude and latitude by source and destination IP
    	geoip {
			source => "[source][ip]"
			target => "geoip"
			add_field => ["[geoip][source.ip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][source.ip][coordinates]","%{[geoip][latitude]}"]
		}
		geoip {
			source => "[dest][ip]"
			target => "geoip"
			add_field => ["[geoip][dest.ip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][dest.ip][coordinates]","%{[geoip][latitude]}"]
		}
		
		mutate {
    		add_tag => [ "packetbeat_netflow" ]
    		convert => [ "[geoip][source.ip][coordinates]", "float" ]
    		convert => [ "[geoip][dest.ip][coordinates]", "float" ]
    		add_field => { "[@metadata][store_multiplier_to_mb]" => "1048576" }
    	}
		    	
    	ruby {
    		code => "event.set('netflow_mb', event.get('[source][stats][net_bytes_total]').to_f / event.get('[@metadata][store_multiplier_to_mb]').to_f)"
		}  	
	}
	
	

	########################################################
	### syslog
	########################################################

	if "secure_log" in [tags] {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:pam_message} %{USER:pam_username} from %{SYSLOGHOST:syslog_hostname}" }
		}
		grok {
			match => { "message" => "Invalid user %{USER:pam_username} from %{IP:src_ip}" }
			add_tag => [ "ssh_invalid_user" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted keyboard-interactive/pam for %{USER:pam_username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_plus_google_auth_success" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Failed password for %{USER:pam_username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_failed_password" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: Accepted %{WORD:auth_method} for %{USER:pam_username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
		}
		grok {
			match => { "message" => "%{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): access denied for user `%{USER:pam_username}' from `%{SYSLOGHOST:syslog_hostname}'" }
			add_tag => [ "ssh_google_auth_failed" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Did not receive verification code from user" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_no_verification_code" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Secret file %{QUOTEDSTRING:google_auth_secret_file_path} changed while trying to use scratch code" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_scratch_code_error" ]
		}
		grok {
			match => { "message" => "Accepted %{DATA:pam_message} for %{USER:pam_username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{GREEDYDATA:ssh_session_closed_message} by %{IP:src_ip}" }
			add_tag => [ "ssh_logout" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): authentication failure; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{SYSLOGHOST:syslog_hostname} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "ssh_auth_failed" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: error: PAM: Authentication failure for %{USER:pam_username} from %{SYSLOGHOST:syslog_hostname}" }
			add_tag => [ "ssh_auth_failed" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): session opened for user %{USER:pam_username} by \(uid=%{INT:pam_UID}\)" }
			add_tag => [ "ssh_session_opened" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted publickey for %{USER:pam_username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_accepted_publickey" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{WORD:pam_type}\(%{DATA:pam_message}\): session closed for user %{USER:pam_username}" }
			add_tag => [ "ssh_logout"]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Received disconnect from %{IP:src_ip}: %{INT:pam_random}: disconnected by user" }
			add_tag => [ "ssh_disconnect" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: new group: name=%{USER:pam_username}, GID=%{INT:pam_GID}" }
			add_tag => [ "linux_new_group" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: new user: name=%{USER:pam_username}, UID=%{INT:pam_UID}, GID=%{INT:pam_GID}, home=%{DATA:pam_home_path}, shell=%{DATA:pam_shell}" }
			add_tag => [ "linux_new_user"]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): password changed for %{USER:pam_username}" }
			add_tag => [ "linux_password_changed" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: delete user '%{USER:pam_username}'" }
			add_tag => [ "linux_delete_user" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{WORD:sudo_word}: %{WORD:pam_type}\(%{DATA:pam_message}\): %{GREEDYDATA:sudo_message}; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{SYSLOGHOST:syslog_hostname} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "linux_sudo_attempt"]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: removed group '%{DATA:pam_group}' owned by '%{USER:pam_username}'" }
			add_tag => [ "linux_removed_group" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: %{USER:priv_username}{1,2} : %{GREEDYDATA:priv_message}" }
			add_tag => [ "linux_privilege_attempt" ]
		}
	}### end (secure_log [tags]) ###


	########################################################
	### mail log (Dovecot, Postfix)
	########################################################

	if "mail_log" in [tags] {
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{DATA:postfix_transaction_id}: from=<%{DATA:postfix_to}>, size=%{INT:postfix_email_size}, nrcpt=%{INT:postfix_nrcpt} \(%{DATA:postfix_message}\)" }
		  add_tag => [ "mail_postfix_message_from_sender" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{DATA:postfix_transaction_id}: to=<%{DATA:postfix_to}>, relay=%{DATA:postfix_relay}, delay=%{NUMBER:postfix_delay}, delays=%{GREEDYDATA:postfix_delays}, dsn=%{GREEDYDATA:postfix_dsn}, status=%{WORD:postfix_status} \(%{GREEDYDATA:postfix_message}\)" }
			add_tag => [ "mail_postfix_message_to_recipient" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{DATA:postfix_transaction_id}: %{WORD:postfix_status}" }
			add_tag => [ "mail_postfix_status" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: statistics: max connection %{GREEDYDATA:postfix_max_connection_rate} for \(%{DATA:postfix_service}:%{IP:postfix_client_ip}\) at %{GREEDYDATA:postfix_anvil_timestamp}" }
			add_tag => [ "mail_statistics_max_connection" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: statistics: max connection count %{NUMBER:postfix_anvil_conn_count} for \(%{DATA:postfix_service}:%{IP:postfix_client_ip}\) at %{GREEDYDATA:postfix_anvil_timestamp}" }
			add_tag => [ "mail_statistics_max_connection_count" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: statistics: max cache size %{NUMBER:postfix_anvil_cache_size} at %{GREEDYDATA:postfix_anvil_timestamp}" }
			add_tag => [ "mail_statistics_max_cache_size" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{WORD:postfix_status} from %{HOSTNAME:postfix_client_hostname}?\[%{IP:postfix_client_ip}\](:%{INT:postfix_client_port})?" }
			add_tag => [ "mail_postfix_status" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{DATA:postfix_transaction_id}: client=%{HOSTNAME:postfix_client_hostname}?\[%{IP:postfix_client_ip}\](:%{INT:postfix_client_port})?" }
			add_tag => [ "mail_postfix_status" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{DATA:postfix_transaction_id}: message-id=<%{DATA:postfix_message_id}>" }
			add_tag => [ "mail_transaction_message_id" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{WORD:postfix_status} from %{HOSTNAME:postfix_client_hostname}?\[%{IP:postfix_client_ip}\](:%{INT:postfix_client_port})?" }
			add_tag => [ "mail_postfix_status" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{DATA:postfix_transaction_id}: to=<%{DATA:postfix_to}>, orig_to=<%{DATA:postfix_orig_to}>, relay=%{DATA:postfix_relay}, delay=%{NUMBER:postfix_delay}, delays=%{GREEDYDATA:postfix_delays}, dsn=%{GREEDYDATA:postfix_dsn}, status=%{WORD:postfix_status} \(%{GREEDYDATA:postfix_message}\)" }
			add_tag => [ "mail_postfix_message_to_recipient" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{DATA:postfix_transaction_id}: uid=%{DATA:postfix_uid} from=<%{DATA:postfix_from}>" }
			add_tag => [ "mail_postfix_message_from_sender" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{GREEDYDATA:postfix_message}?\[%{IP:postfix_client_ip}\](:%{INT:postfix_client_port})?" }
			add_tag => [ "mail_postfix_ip_and_port" ]
		}

		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:postfix_host} postfix/%{WORD:postfix_process}(?:\[%{POSINT:postfix_component_id}\])?: %{GREEDYDATA:postfix_message}?\[%{IP:postfix_client_ip}\](:%{INT:postfix_client_port})?: %{GREEDYDATA:postfix_rejected_codes} <%{DATA:postfix_rejected_user}>: %{GREEDYDATA:postfix_message}; from=<%{DATA:postfix_from}> to=<%{DATA:postfix_to}> proto=%{DATA:postfix_protocol} helo=<%{DATA:postfix_helo}>" }
			add_tag => [ "mail_postfix_ip_and_port" ]
			add_tag => [ "mail_postfix_error" ]
		}
	}### end (mail_log [tags]) ###
	
	
	########################################################
	### is_two_factor_auth_enabled
	########################################################

	if "is_two_factor_auth_enabled" in [tags] {
		
		#Logs with this message typically indicate that this is the first time the host has been logged into from the server making the SSH request
		grok {
			match => { "message" => "Script started on %{DAY} %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{DATA:HALFDAY} %{DATA:TIMEZONE};The authenticity of host%{GREEDYDATA:ssh_logon_message}" }
			add_tag => [ "two_factor_continue_connecting_prompt" ]
			add_tag => [ "two_factor_check" ]
			add_tag => [ "two_factor_status_unknown" ]
		}
		
		grok {
			match => { "message" => "Script started on %{DAY} %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{DATA:HALFDAY} %{DATA:TIMEZONE};Password:%{GREEDYDATA:ssh_logon_message}" }
			add_tag => [ "two_factor_check" ]
			add_tag => [ "two_factor_status_no" ]
		}
		
		grok {
			match => { "message" => "Script started on %{DAY} %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{DATA:HALFDAY} %{DATA:TIMEZONE};Verification code:%{GREEDYDATA:ssh_logon_message}" }
			add_tag => [ "two_factor_check" ]
			add_tag => [ "two_factor_status_yes" ]
		}

	}

} ### end filter

output {
	elasticsearch {
		hosts => "localhost:9200"
		manage_template => false
		index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
		document_type => "%{[@metadata][type]}"
	}
}
