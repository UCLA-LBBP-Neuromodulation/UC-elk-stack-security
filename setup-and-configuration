The Neuromodulation division at the UCLA Semel Institute (UCLA Health), in conjunction with the UCLA Office of the President's information security division, is pleased to open-source our work on an information-security focused Elastic Stack (formerly known as the "ELK" stack) (https://www.elastic.co/).

We will continuously update this page and this GitHub repo overall with our production code and configurations to detect and alert on anomalous security events.



##########################################################################################################################################################
### PART A: ELK STACK
##########################################################################################################################################################


### Pre-Steps:
yum install psmisc net-tools mlocate zip unzip git -y;

####################################################################################
### Step 1 (ELK Stack): Install Java
####################################################################################

### Use:
http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

####################################
### Step 1.1: Install jdk1.8.0_121
####################################
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.tar.gz";
tar xzf jdk-8u121-linux-x64.tar.gz;

cd /opt/jdk1.8.0_121/;
alternatives --install /usr/bin/java java /opt/jdk1.8.0_121/bin/java 2;
alternatives --config java;

alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_121/bin/jar 2;
alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_121/bin/javac 2;
alternatives --set jar /opt/jdk1.8.0_121/bin/jar;
alternatives --set javac /opt/jdk1.8.0_121/bin/javac;

####################################
### Step 1.2: Home variables
####################################

export JAVA_HOME=/opt/jdk1.8.0_121
export JRE_HOME=/opt/jdk1.8.0_121/jre

####################################
### Step 1.3: $PATH Variable:
####################################
export PATH=$PATH:/opt/jdk1.8.0_121/bin:/opt/jdk1.8.0_121/jre/bin


### Check version. 

java -version

### It should yield:
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)



####################################################################################
### Step 2 (ELK Stack): Install ruby, jruby
####################################################################################

####################################
### Step 2.1: ruby, jruby
####################################

### Note: check this link (https://rvm.io/rvm/install) latest key before just blindly inputting this command:
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3;

yum install gcc-c++ patch readline readline-devel zlib zlib-devel -y \
&& yum install libyaml-devel libffi-devel openssl-devel make -y \
&& yum install bzip2 autoconf automake libtool bison iconv-devel -y \
&& curl -sSL https://get.rvm.io | bash -s stable --ruby=jruby --gems=rails \
&& rvm install ruby-2.3.3 \
&& rvm docs generate-ri

###################
### Warning #1: 
###################
If you see something like this, cancel (ctrl + c or +x), then run "rvm use jruby-9.1.6.0" and run the curl command above again: 

"Warning! PATH is not properly set up, '/usr/local/rvm/gems/jruby-9.1.6.0/bin' is not at first place,
usually this is caused by shell initialization files - check them for 'PATH=...' entries,
it might also help to re-add RVM to your dotfiles: 'rvm get stable --auto-dotfiles'..."

###################
### Warning #2:
###################
If jruby fails to install, for whatever reason: https://github.com/jruby/jruby/wiki/GettingStarted
export PATH=~/jruby/bin:$PATH
rvm install jruby
rvm use jruby (### Note: rvm use jruby results in Using /usr/local/rvm/gems/jruby-9.1.6.0)
jruby --version

###################
### INFO:
###################
###  We use "bundle update," because it seems to use slightly more update versions.
### (a) gem update (using Rubygems) addresses all gems for a host. If you are using RVM, this manages gemsets. 
### (b) "bundle update", on the other hand. manages a gemset for a single application, and can be deployed to multiple machines. 



####################################################################################
### Step 3 (ELK Stack): Nginx and SSL Cert
####################################################################################

####################################
### Step 3.1: Install Nginx
####################################
sudo yum install epel-release -y;
sudo yum install nginx httpd-tools -y \
&& sudo service start nginx;

####################################
### Step 3.2: Configure Nginx
####################################
chkconfig nginx on;


########################
### Step 3.3:
########################
Add "fs.file-max = 70000" to /etc/sysctl.conf (without the quotes)

########################
### Step 3.4:
########################
Add "nginx soft nofile 10000" to /etc/security/limits.conf (without the quotes)
Add "nginx hard nofile 30000" to /etc/security/limits.conf (without the quotes)

########################
### Step 3.5:
########################
Add "worker_rlimit_nofile 30000;" to /etc/nginx/nginx.conf (without the quotes)	

Change "worker_processes 1;" to "worker_processes auto;" in /etc/nginx/nginx.conf (without the quotes)	

Change the following in /etc/nginx/nginx.conf:

	events {
	    worker_connections 1024;
	}
	
	TO:
	events {
		worker_connections 10000;
	}

########################
### Step 3.6:
########################
### "Generate Keys from elkbeats.cfr" (note: you will have to fill in informationa about your server)

openssl req -x509 -batch -nodes -newkey rsa:2048 -keyout /etc/pki/tls/private/logstash-beats.key -out /etc/pki/tls/certs/logstash-beats.crt -config /etc/pki/tls/elkbeats.cfr -days 1825;"

########################
### Step 3.7:
########################

put the contents between "START" and "END" comment blocks below into /etc/nginx/conf.d/kibana.conf:

###### START ###### 
server {
	listen                *:443 ;
	ssl on;
	ssl_certificate 	/etc/pki/tls/certs/beats-logstash.crt; 
	ssl_certificate_key /etc/pki/tls/private/beats-logstash.key;
	server_name           [you Fully-Qualified Domain Name];
	access_log            /var/log/nginx/kibana.access.log;
	error_log /var/log/nginx/kibana.error.log;
	
	location / {
		auth_basic "Restricted";
		auth_basic_user_file /etc/nginx/htpasswd.users;
		proxy_pass http://localhost:5601; ## Replace with your kibana instance
	}
}
###### END ###### 

########################
### Step 3.8:
########################

### Note: your ELK host server must be able to accept traffic from certain ports. These are shown underneath the "### Ports:" section.
###		  We have also configured the correct ports for you. Just fill in the values for:
		  [ipv4 for your IP address]
		  [ipv4 for your ELK host server]
		  [ipv4 for Beats client]
		  [ipv4 for your OSSEC HIDS Server . . . ]
		  
### Put the contents between "START" and "END" comment blocks below into /home/firewall.sh:

###### Start ###### 
#!/bin/bash

### Ports:
	#80: HTTP
	#443: HTTPS
	#5601: Kibana (routes through nginx proxy)
	#9200: Elasticsearch (for security reasons, restricted only to localhost)
	#514: syslog
	#5044: Beats (sent directly to Logstash)
	#9000: OSSEC

iptables -F \
&& service iptables save \
&& service iptables restart \
&& iptables -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 22 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for your IP address]/32 -p tcp -m tcp --dport 22 -j ACCEPT \
&& iptables -A INPUT -p tcp -m tcp --dport 80 -j DROP \


&& iptables -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 80 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for your ELK host server]/32 -p tcp -m tcp --dport 80 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for your IP address]/32 -p tcp -m tcp --dport 80 -j ACCEPT \
&& iptables -A INPUT -p tcp -m tcp --dport 80 -j DROP \
&& iptables -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 443 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for your ELK host server]/32 -p tcp -m tcp --dport 443 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for your IP address]/32 -p tcp -m tcp --dport 443 -j ACCEPT \
&& iptables -A INPUT -p tcp -m tcp --dport 443 -j DROP \
&& iptables -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 5601 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for your ELK host server]/32 -p tcp -m tcp --dport 5601 -j ACCEPT \
&& iptables -A INPUT -p tcp -m tcp --dport 5601 -j DROP \
&& iptables -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 5044 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for Beats client]/32 -p tcp -m tcp --dport 5044 -j
&& iptables -A INPUT -s [ipv4 for your ELK host server]/32 -p tcp -m tcp --dport 5044 -j ACCEPT \ ACCEPT \
&& iptables -A INPUT -p tcp -m tcp --dport 5044 -j DROP \
&& iptables -A INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 9200 -j ACCEPT \
&& iptables -A INPUT -p tcp -m tcp --dport 9200 -j DROP \
&& iptables -A INPUT -s 127.0.0.1/32 -p udp -m udp --dport 514 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for syslog]/32 -p udp -m udp --dport 514 -j ACCEPT \
&& iptables -A INPUT -s 127.0.0.1/32 -p udp -m udp --dport 9000 -j ACCEPT \
&& iptables -A INPUT -s [ipv4 for your OSSEC HIDS Server, which is also the same ipv4 for your ELK host server (see part B of these instructions)]/32 -p udp -m udp --dport 9000 -j ACCEPT \
&& iptables -A INPUT -p udp -m udp --dport 9000 -j DROP \
&& service iptables save \
&& service iptables restart
###### END ###### 

########################
### Step 3.9:
########################

service nginx restart



####################################################################################
### Step 4 (ELK Stack): Install Elasticsearch
####################################################################################

####################################
### Step 4.1: Install Elasticsearch
####################################
rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch \
&& touch /etc/yum.repos.d/elasticsearch.repo \
&& printf "[elasticsearch-5.x]\nname=Elasticsearch repository for 5.x packages\nbaseurl=https://artifacts.elastic.co/packages/5.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=1\nautorefresh=1\ntype=rpm-md\n" >> /etc/yum.repos.d/elasticsearch.repo \
&& sudo yum install elasticsearch -y \
&& chkconfig enable elasticsearch \
&& sed -i 's/#network.host: 192.168.0.1/network.host: 127.0.0.1/g' /etc/elasticsearch/elasticsearch.yml \
&& sed -i 's/#http.port: 9200/http.port: 9200/g' /etc/elasticsearch/elasticsearch.yml; 

### NOTE: if you have installed the X-Pack with a basic license, comment out the following line in /etc/elasticsearch/elasticsearch.yml:
#action.auto_create_index: .security,.monitoring*,.watches,.triggered_watches,.watcher-history* in /etc/elasticsearch.yml


####################################
### Step 4.2: Elasticsearch Plugins
####################################
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-geoip;




####################################################################################
### Step 5 (ELK Stack): Install Logstash and Logstash Plugins
####################################################################################

####################################
### Step 5.1: Install Logstash
####################################

### Step 5.1.1: Install Logstash 5.2.2 (as of this writing) and execute the system-install script
yum install logstash -y;
sudo /usr/share/logstash/bin/system-install;

### Step 5.1.2: Start Logstash
sudo initctl start logstash


####################################
### Step 5.2: Logstash Plugins
####################################

### Step 5.2.1: Install Logstash plugins relevant to this project. If this takes 30 minutes or so, it's completely normal:
### (see https://www.elastic.co/guide/en/logstash/current/input-plugins.html)

	### Input plugins (https://www.elastic.co/guide/en/logstash/current/input-plugins.html)
	/usr/share/logstash/bin/logstash-plugin install logstash-input-beats;
	/usr/share/logstash/bin/logstash-plugin install logstash-input-elasticsearch;
	/usr/share/logstash/bin/logstash-plugin install logstash-input-file;
	/usr/share/logstash/bin/logstash-plugin install logstash-input-syslog;
	/usr/share/logstash/bin/logstash-plugin install logstash-input-udp;
	/usr/share/logstash/bin/logstash-plugin install logstash-input-tcp;
	/usr/share/logstash/bin/logstash-plugin install logstash-input-heartbeat;
	
	
	### Output plugins (https://www.elastic.co/guide/en/logstash/current/output-plugins.html)
	/usr/share/logstash/bin/logstash-plugin install logstash-output-elasticsearch;
	/usr/share/logstash/bin/logstash-plugin install logstash-output-email;
	/usr/share/logstash/bin/logstash-plugin install logstash-output-slack;

	### Filter plugins (https://www.elastic.co/guide/en/logstash/current/filter-plugins.html)
	/usr/share/logstash/bin/logstash-plugin install logstash-filter-geoip;
	/usr/share/logstash/bin/logstash-plugin install logstash-filter-json;
	/usr/share/logstash/bin/logstash-plugin install logstash-filter-metrics;
	
		
		

####################################################################################
### Step 6 (ELK Stack): Install Kibana
####################################################################################

########################
### Step 6.1
########################

printf "[kibana-5.x]\nname=Elasticsearch repository for 5.x packages\nbaseurl=https://artifacts.elastic.co/packages/5.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=1\nautorefresh=1\ntype=rpm-md\n" >> /etc/yum.repos.d/kibana.repo \
&& sudo yum install kibana -y;


########################
### Step 6.2
########################

sed -i 's/#server.port: 5601/server.port: 5601/g' /etc/kibana/kibana.yml; 
sed -i 's/#server.host: "localhost"/server.host: "10.10.10.116"/g' /etc/kibana/kibana.yml; 
sed -i 's/localhost:9200/127.0.0.1:9200/g' /etc/kibana/kibana.yml; 
sed -i 's/#elasticsearch.url:/elasticsearch.url:/g' /etc/kibana/kibana.yml;
sed -i 's/#kibana.index: ".kibana"/kibana.index: ".kibana"/g' /etc/kibana/kibana.yml; 
sed -i 's/#elasticsearch.ssl.verify: true/elasticsearch.ssl.verify: false/g' /etc/kibana/kibana.yml; 
sed -i 's/#server.name: "your-hostname"/server.name: "cloucompli"/g' /etc/kibana/kibana.yml; 


########################
### Step 6.3
########################

sudo chkconfig --add kibana \
&& sudo service kibana start;


########################
### Step 6.4
########################

### Visit http://10.10.10.116:5601

Management >

	(1) Uncheck Index contains time-based events  
	
	(2) Set index to ".kibana"
	
	(3) Create




##########################################################
### Step 7: Set up Beats Repo (5.x)
##########################################################
sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch \
&& printf "[elastic-5.x]\nname=Elastic repository for 5.x packages\nbaseurl=https://artifacts.elastic.co/packages/5.x/yum\ngpgcheck=1\ngpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch\nenabled=1\nautorefresh=1\ntype=rpm-md" >> /etc/yum.repos.d/elastic.repo \





##########################################################
### Step 8: Filebeat
##########################################################

#### Note: Steps 8.1 and 8.2 should be run on the ELK
		   host server and each agent server running
		   Metricbeat. Step 8.3 should only be run on
		   the ELK host server.

########################
### Step 8.1
########################
### ON ELK HOST and AGENTS:

&& sudo yum install metricbeat -y;


########################
### Step 8.2
########################
### ON ELK HOST and AGENTS:

sed -i 's/"#hosts:"/"hosts:"/g' /etc/metricbeat/metricbeat.yml;
sed -i 's/"localhost:9200"/"[IPv4 of your ELK Host]:5044"/g' /etc/metricbeat/metricbeat.yml;


########################
### Step 8.3
########################
### ON ELK HOST ONLY:

curl -XPUT 'http://127.0.0.1:9200/_template/metricbeat' -d@/etc/metricbeat/metricbeat.template.json;

### Output should be: "{"acknowledged":true}[root@elk-host-5 kibana]#" (without the quotes)

chkconfig metricbeat on;
service metricbeat start;





##########################################################
### Step 9: Filebeat
##########################################################

#### Note: Steps 9.1 and 9.2 should be run on the ELK
		   host server and each agent server running
		   filebeat. Step 9.3 should only be run on
		   the ELK host server.

########################
### Step 9.1
########################
### ON ELK HOST and AGENTS:

&& sudo yum install filebeat -y;


########################
### Step 9.2
########################
### ON ELK HOST and AGENTS:

sed -i 's/"#hosts:"/"hosts:"/g' /etc/filebeat/filebeat.yml;
sed -i 's/"localhost:9200"/"[IPv4 of your ELK Host]:5044"/g' /etc/filebeat/filebeat.yml;


########################
### Step 9.3
########################
### ON ELK HOST ONLY:

curl -XPUT 'http://127.0.0.1:9200/_template/filebeat' -d@/etc/filebeat/filebeat.template.json;

### Output should be: "{"acknowledged":true}[root@elk-host-5 kibana]#" (without the quotes)

chkconfig filebeat on;
service filebeat start;






##########################################################
### Step 10: packetbeat
##########################################################

#### Note: Steps 10.1 and 10.2 should be run on the ELK
		   host server and each agent server running
		   packetbeat. Step 10.3 should only be run on
		   the ELK host server.

########################
### Step 10.1
########################
### ON ELK HOST and AGENTS:

&& sudo yum install packetbeat -y;


########################
### Step 10.2
########################
### ON ELK HOST and AGENTS:

sed -i 's/"#hosts:"/"hosts:"/g' /etc/packetbeat/packetbeat.yml;
sed -i 's/"localhost:9200"/"[IPv4 of your ELK Host]:5044"/g' /etc/packetbeat/packetbeat.yml;


########################
### Step 10.3
########################
### ON ELK HOST ONLY:

curl -XPUT 'http://127.0.0.1:9200/_template/packetbeat' -d@/etc/packetbeat/packetbeat.template.json;

### Output should be: "{"acknowledged":true}[root@elk-host-5 kibana]#" (without the quotes)

chkconfig packetbeat on;
service packetbeat start;


	

##########################################################
### Step 11: heartbeat
##########################################################

#### Note: Steps 11.1 and 11.2 should be run on the ELK
		   host server and each agent server running
		   heartbeat. Step 11.3 should only be run on
		   the ELK host server.

########################
### Step 11.1
########################
### ON ELK HOST and AGENTS:

&& sudo yum install heartbeat -y;


########################
### Step 11.2
########################
### ON ELK HOST and AGENTS:

sed -i 's/"#hosts:"/"hosts:"/g' /etc/heartbeat/heartbeat.yml;
sed -i 's/"localhost:9200"/"[IPv4 of your ELK Host]:5044"/g' /etc/heartbeat/heartbeat.yml;


########################
### Step 11.3
########################
### ON ELK HOST ONLY:

curl -XPUT 'http://127.0.0.1:9200/_template/heartbeat' -d@/etc/heartbeat/heartbeat.template.json;

### Output should be: "{"acknowledged":true}[root@elk-host-5 kibana]#" (without the quotes)

chkconfig heartbeat on;
service heartbeat start;



##########################################################
### Step 12: Import Dashboards
##########################################################
		
cd /usr/share/filebeat && ./scripts/import_dashboards -es http://127.0.0.1:9200;
cd /usr/share/packetbeat && ./scripts/import_dashboards -es http://127.0.0.1:9200;
cd /usr/share/metricbeat && ./scripts/import_dashboards -es http://127.0.0.1:9200;

		
		
		
		
		
		
		
		
##########################################################################################################################################################
### USEFUL NOTES:
##########################################################################################################################################################



##########################################################
### Elasticsearch
##########################################################

### Start Elasticsearch with 2GB of memory
	ES_JAVA_OPTS="-Xms2g -Xmx2g" /usr/share/elasticsearch/bin/elasticsearch	

### Check elastic cluster health
	curl 'localhost:9200/_cat/indices?v';
	
	curl 'http://localhost:9200/%{[@metadata][beat]}-2017.01.13'
	
	curl -XGET 'localhost:9200/*2017.01.13*/_search

### Delete everything
	curl -XDELETE 'http://localhost:9200/*'

### Delete a day:
	curl -XDELETE 'http://localhost:9200/filebeat-2016.12.25'

### Delete a Beat:
	curl -XDELETE 'http://localhost:9200/heartbeat-*'
	
### Search for tag
	curl 'localhost:9200/_search?q=tag:fping_TMS_app';
	
	curl 'localhost:9200/_cat/indices?q=tag:fping_TMS_app';
	
	

##########################################################
### Logstash
##########################################################

### Restart Logstash when upstart is enabled (e.g., CentOS 6)"
	sudo initctl stop logstash; sudo initctl start logstash;
		
		
### Start Logstash manually
	/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf --path.settings=/etc/logstash/logstash.yml
	
	### CORRECT:
	sudo -u logstash /usr/share/logstash/bin/logstash --path.settings /etc/logstash -t


### Check Logstash config status
	sudo service logstash configtest
	

### Port
	netstat -an |grep 5044
	
	
	bin/logstash -f /etc/logstash/conf.d/logstash.conf
	
	
##########################################################
### Kibana
##########################################################
	
### error message: "FATAL Port 5601 is already in use. Another instance of Kibana may be running!"

	netstat -apln | grep 5601;
	kill -9 [enter here the result from the command above]


##########################################################
### Metricbeat
##########################################################
	
### Start Metricbeat manually
	/usr/share/metricbeat/bin/metricbeat -c /etc/metricbeat/metricbeat.yml -path.home /usr/share/metricbeat -path.config /etc/metricbeat -path.data /var/lib/metricbeat -path.logs /var/log/metricbeat


### Check Metricbeat config
	sudo /usr/share/metricbeat/bin/metricbeat -configtest -e
	

### Check Metricbeat status
	curl -XGET 'http://localhost:9200/metricbeat-*/_search?pretty'
	

##########################################################
### Filebeat
##########################################################
	
### Start Filebeat manually
	/usr/share/filebeat/bin/filebeat -c /etc/filebeat/filebeat.yml -path.home /usr/share/filebeat -path.config /etc/filebeat -path.data /var/lib/filebeat -path.logs /var/log/filebeat


### Check Filebeat config
	sudo /usr/share/filebeat/bin/filebeat -configtest -e /etc/filebeat/filebeat.yml 
	

### Check Filebeat status
	curl -XGET 'http://localhost:9200/filebeat-*/_search?pretty';
	

##########################################################
### Packetbeat
##########################################################

### Start Packetbeat manually
	/usr/share/packetbeat/bin/packetbeat -c /etc/packetbeat/packetbeat.yml -path.home /usr/share/packetbeat -path.config /etc/packetbeat -path.data /var/lib/packetbeat -path.logs /var/log/packetbeat
	
### Check Packetbeat config
	sudo /usr/share/packetbeat/bin/packetbeat -configtest -e


### Check Packetbeat status

	### Create a simple HTTP request. For example:
	curl http://www.cloudcompli.com/ > /dev/null
	
	### Now verify that the data is present in Elasticsearch by issuing the following command:
	
	curl -XGET 'http://localhost:9200/packetbeat-*/_search?pretty';
	
	curl -XGET 'http://localhost:9200/filebeat-*/_search?pretty';


##########################################################
### KILL PID BY PORT
##########################################################

fuser -k 5601/tcp


##########################################################
### DELETE
##########################################################

### DELETE an Index (e.g., here: packetbeat)
	curl -XDELETE 'http://localhost:9200/packetbeat-*';
	curl -XDELETE 'http://localhost:9200/filebeat-*';






		
##########################################################################################################################################################
### PART B: (OSSEC)
##########################################################################################################################################################

		
		
		


####################################################################################
### Step 1 (OSSEC): Install
####################################################################################

### Step 1.1:
cd /opt;
wget https://github.com/ossec/ossec-hids/archive/2.9.0.tar.gz;
mv 2.9.0.tar.gz ossec-hids-2.9.0.tar.gz;


### Step 1.2:
### Then, ensure that the checksum of ossec-hids-2.9.0.tar.gz is, without the quotes, as follows exactly: "abd5741dc474cbce5cc116f46a5ef2528c847918"
### You can do so by running the following command from the command line:
sha1sum ossec-hids-2.9.0.tar.gz;

### Step 1.3:
###If the shasum matches, unzip the archive:
tar zxvf ossec-hids-2.9.0.tar.gz;

### Step 1.4:
### Enter the directory and begin the installation:
cd ossec-hids-2.9.0 && sudo ./install.sh

####################################################################################
### Step 2 (OSSEC):
### on Hybrid (acting as both OSSEC server and agent)
####################################################################################

### Once the installation is done, the configuration for the agent portion of the hybrid OSSEC installation will begin:

### In step 3.1, enter the IPv4 address of your host server:

3- Configuring the OSSEC HIDS.

  3.1- What's the IP Address or hostname of the OSSEC HIDS server?: [ipv4 for your ELK host server (which is also your OSSEC HIDS Server)]


####################################################################################
### Step 3 (OSSEC): Define Agents
####################################################################################

### Step 3.1: on ELK server
/var/ossec/bin/manage_agents

### Step 3.2: 
Select "(A)" for "(A)dd an agent (A)."

### Step 3.3:
* A name for the new agent: [enter human-readable name here. We recommend the server's URL.]
* The IP Address of the new agent: [enter IPv4 here]
* An ID for the new agent[001]: 001

### Step 3.4:
Select "(E)" for "(E)xtract key for an agent (E)." Copy the value of this key.

### Step 3.5:
On each agent, enter:
/var/ossec/ossec-agent/bin/manage_agents

### Step 3.6:
Then enter "(I)" for "(I)mport key from the server (I)."

### Step 3.7:
Enter the key you copied in Step 3.4 on each agent at the prompt that reads "Paste it here (or '\q' to quit):". Then, if the resulting values are correct, enter "y" at the prompt that reads "Confirm adding it?(y/n):"




 - System is Redhat Linux.
 - Init script modified to start OSSEC HIDS during boot.


 - To start OSSEC HIDS:
      /var/ossec/ossec-agent/bin/ossec-control start

 - To stop OSSEC HIDS:
      /var/ossec/ossec-agent/bin/ossec-control stop

 - The configuration can be viewed or modified at /var/ossec/ossec-agent/etc/ossec.conf

    
 - You first need to add this agent to the server so they 
   can communicate with each other. When you have done so,
   you can run the 'manage_agents' tool to import the 
   authentication key from the server.
   
   /var/ossec/ossec-agent/bin/manage_agents

